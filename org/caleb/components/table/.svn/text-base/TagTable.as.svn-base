import com.kelvinluck.flashr.core.Photo;
import org.caleb.flickr.FlickrManager;
import org.caleb.components.table.Table;
import org.caleb.components.table.TableCell;
import org.caleb.event.Event;

class org.caleb.components.table.TagTable extends Table  
{
	public static var FLICKR:String = 'flickr';
	public static var SQUARE:String = 'square';
	public static var THUMB:String = 'thumbr';
	public static var SMALL:String = 'small';
	public static var MEDIUM:String = 'medium';
	public static var LARGE:String = 'large';
	public static var ORIGINAL:String = 'original';
	
	static var SymbolName:String = '__Packages.org.caleb.components.table.TagTable';
	static var SymbolLinked = Object.registerClass(SymbolName, TagTable);
	
	private var __flickrManager:FlickrManager;
	private var __pages:Number;
	private var __search:Object;
	private var __photos:Array;
	private var __type:String;
	private var __photoSize:String;
	private var __photosetId:String;
	private var __tempPhotosetId:String;
	private var __authenticated:Boolean;
	private var __loadedImages:Number;
	private var __fadeInImages:Boolean
	private var __loadDone:Boolean;
	private var __populated:Boolean;
	
	private var __displayProperties:Object;
	
	public function TagTable()
	{
		//trace('constructor invoked');
	}
	public function setDisplayProperties(columns:Number, multipleSelection:Boolean, cellWidth:Number, cellHeight:Number, cellPadding:Number, cellColor:Number):Void
	{
		__displayProperties = new Object;
		__displayProperties.columns = columns;
		__displayProperties.multipleSelection = multipleSelection;
		__displayProperties.cellWidth = cellWidth;
		__displayProperties.cellHeight = cellHeight;
		__displayProperties.cellPadding = cellPadding;
		__displayProperties.cellColor = cellColor;
	}
	public function init(type:String, photoSize:String, applicationId:String, secret:String, authToken:String):Void
	{
		__search = new Object;
		__photoSize = photoSize;
		__search.page = 0;
		__type = type;
		__loadedImages = 0;
		
		__flickrManager = new FlickrManager(this, applicationId, secret, authToken);
	}
	public function search():Void
	{
		////trace('search invoked');
		__search.tag_mode = 'all';
		__search.sort = 'interestingness-asc';
		__flickrManager.photosSearch(__search);
	}
	private function onFlickrAuthCheckToken(e:Event):Void
	{
		//trace('authentication complete');
		__authenticated = true;
		if(__tempPhotosetId != undefined)
		{
			//trace('getting photoset: ' + __tempPhotosetId);
			__tempPhotosetId = undefined; 
			__flickrManager.getPhotoSet(__photosetId);
		}
		else
		{
			//trace('nothing pending');
		}
	}
	private function onFlickrPhotosetsGetPhotos(e:Event):Void
	{
		var set:Number = Number(e.getArgument('photoset').id);
		//trace('********************* ' + e.getArgument('photoset').id + ' ======= ' + __photosetId);
		if(set == __photosetId)
		{
			//trace('('+this._name+') onFlickrPhotosetsGetPhotos invoked, result length:'+e.getArguments()['photos'].length);
			__displayProperties.rows = Math.ceil(e.getArguments()['photos'].length/__displayProperties.rows);
			this.showPhotos(e);
			
			//trace('dispatching onFlickrPhotosSearch invoked');
			this.dispatchEvent(e);
			//org.caleb.Configuration.Log.debug('dispatching onTableRendered event');
			this.dispatchEvent(new org.caleb.event.Event('onTableRendered'))
		}
	}
	private function onFlickrPhotosSearch(e:Event):Void
	{
		//trace('('+this._name+') onFlickrPhotosSearch invoked, result length:'+e.getArguments()['photos'].length);
		
		this.showPhotos(e);
		
		//trace('dispatching onFlickrPhotosSearch invoked');
		this.dispatchEvent(e);
		//org.caleb.Configuration.Log.debug('dispatching onTableRendered event');
		this.dispatchEvent(new org.caleb.event.Event('onTableRendered'))
	}
	public function showPhotos(e:Event):Void
	{
		__photos = new Array(e.getArguments()['photos'].length);
		if(isNaN(__displayProperties.columns) || __displayProperties.columns < 1)
		{
			//trace('invalid column count: ' + __displayProperties.columns + ', resetting to length of result ('+e.getArguments()['photos'].length+')');
			__displayProperties.columns = e.getArguments()['photos'].length;
		}
		super.init(__displayProperties.columns, __photos.length, __displayProperties.multipleSelection, __displayProperties.cellWidth, __displayProperties.cellHeight, __displayProperties.cellPadding, __displayProperties.cellColor);
		for(var i:Number = 0; i < e.getArguments()['photos'].length; i++)
		{
			__photos[i] = (Photo(e.getArguments()['photos'][i]));
		}
		//org.caleb.Configuration.Log.debug('__photos[0]: ' +__photos[0])
		////trace('pages: ' + Number(e.getArgument('pages')));
		this.populate();
		
		__items[0].selected = true;
				
		__pages = Number(e.getArgument('pages'));
	}
	public function onTableCellImageLoadInit(e:org.caleb.event.Event):Void
	{
		if(__loadDone || TableCell(e.getSender()).table != this)//if(__loadComplete == true)
		{
			return;
		}
		////trace('onTableCellImageLoadInit invoked');
		__loadedImages++;
		org.caleb.util.MovieClipUtil.fadeIn(TableCell(e.getSender()), 1);
		
		if(__loadedImages == __photos.length)
		{
			trace('images loaded: ' + this);
			var evt:org.caleb.event.Event = new org.caleb.event.Event('onTableImagesLoaded');
			this.dispatchEvent(evt);
			//__loadDone = true;
			//__loadComplete = true;
		}
		
		this.dispatchEvent(e);
	}
	private function addCell():TableCell
	{
		var cell:TableCell = super.addCell();
		cell._alpha = 0;
		return cell;
	}
	private function populate():Void
	{
		//if(__populated) return;
		trace('populating ' + this);
		for(var i:Number = 0; i < __photos.length; i++)
		{
			switch(__photoSize)
			{
				case SQUARE:
					__items[i].loadImage(__photos[i].thumbnailUrl);
				break;
				case THUMB:
					//trace('THUMB NOT SUPPORTED BY FLASHER');
					__items[i].loadImage(__photos[i].thumbURL);
				break;
				case SMALL:
					__items[i].loadImage(__photos[i].smallUrl);
				break;
				case MEDIUM:
					__items[i].loadImage(__photos[i].mediumUrl);
				break;
				case LARGE:
					__items[i].loadImage(__photos[i].largeUrl);
				break;
				case ORIGINAL:
					__items[i].loadImage(__photos[i].url);
				break;
			}
			// todo: determine if this is redundant
			__items[i].data.photo = __photos[i]
			this.getCell[i].data.photo = __photos[i];
			
			if((i + 1) == __photos.length) 
			{
				break;
			}
		}
		__populated = true;
	}
	public function get tags():String
	{
		return __search.tags;
	}
	public function set tags(arg:String):Void
	{
		if(__search.tags != arg)
		{
			__search.tags = arg;
		}
	}
	public function get user_id():String
	{
		return __search.user_id;
	}
	public function set user_id(arg:String):Void
	{
		if(__search.user_id != arg)
		{
			__search.user_id = arg;
		}
	}
	public function get page():Number
	{
		return __search.page;
	}
	public function get pages():Number
	{
		return __pages;
	}
	public function set page(arg:Number) 
	{
		this.deselectAll();
		__search.page = arg;
	}
	public function set loaderId(arg:String):Void
	{
		for(var i:Number = 0; i < __photos.length; i++)
		{
			this.getCell[i].loaderId = arg;
		}
	}
	public function get photosetId():String
	{
		return __photosetId;
	}
	public function set photosetId(arg:String) 
	{
		__photosetId = arg;
		
		if(__authenticated == true)
		{
			__fadeInImages = true;
			__flickrManager.getPhotoSet(__photosetId);
		}
		else
		{
			__tempPhotosetId = arg;
		}
	}
}